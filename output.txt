Path: C:\FPOS\kpapython\kpa\main.py
--------------------------------------------------------------------------------
import sys
from PyQt5.QtWidgets import QApplication

from ui.main.pos_main_controller import POSMainController


def main():
    app = QApplication(sys.argv)
    app.setStyle("Fusion")

    window = POSMainController()  # 🆕 use controller instead of POSWindow
    window.show()

    sys.exit(app.exec_())


if __name__ == '__main__':
    main()

================================================================================

Path: C:\FPOS\kpapython\kpa\core\models\bill.py
--------------------------------------------------------------------------------
class BillItem:
    def __init__(self, id: int, bill_id: int, product_id: int, quantity: float, price: float):
        self.id = id
        self.bill_id = bill_id
        self.product_id = product_id
        self.quantity = quantity
        self.price = price

class Bill:
    def __init__(self, id: int, customer_id: str, date: str, total: float):
        self.id = id
        self.customer_id = customer_id
        self.date = date
        self.total = total
        self.items: list[BillItem] = []

================================================================================

Path: C:\FPOS\kpapython\kpa\core\models\product.py
--------------------------------------------------------------------------------
class Product:
    def __init__(
        self,
        id: int,
        name: str,
        price: float,
        barcode: str,
        unit: str,
        image_path: str,
        order_index: int,
        category: str,
    ):
        self.id = id
        self.name = name
        self.price = price
        self.barcode = barcode
        self.unit = unit
        self.image_path = image_path
        self.order_index = order_index
        self.category = category

================================================================================

Path: C:\FPOS\kpapython\kpa\core\services\bill_service.py
--------------------------------------------------------------------------------
from database.bill_dao import BillDAO
from core.models.bill import Bill

class BillService:
    def __init__(self):
        self.dao = BillDAO()

    def clear_bill_items(self, bill_id: int) -> None:
        """
        Removes all items for the given bill and resets the total.
        """
        dao = self.dao
        cur = dao.conn.cursor()
        cur.execute("DELETE FROM bill_items WHERE bill_id = ?", (bill_id,))
        cur.execute("UPDATE bills SET total = 0 WHERE id = ?", (bill_id,))
        dao.conn.commit()

    def create_bill(self, customer_id: str) -> int:
        return self.dao.create_bill(customer_id)

    def add_item_to_bill(self, bill_id: int, product_id: int, qty: float, price: float) -> int:
        return self.dao.add_item(bill_id, product_id, qty, price)

    def get_bill(self, bill_id: int) -> Bill | None:
        return self.dao.get_bill(bill_id)

    def list_bills(self) -> list[Bill]:
        return self.dao.list_bills()

    def delete_bill(self, bill_id: int) -> bool:
        return self.dao.delete_bill(bill_id)

    def remove_item(self, item_id: int) -> bool:
        return self.dao.remove_item(item_id)


================================================================================

Path: C:\FPOS\kpapython\kpa\core\services\product_service.py
--------------------------------------------------------------------------------
from core.models.product import Product
from database.product_repository import ProductRepository


class ProductService:
    def __init__(self):
        self.repo = ProductRepository()

    def create_product(self, **kwargs) -> int:
        return self.repo.create(**kwargs)

    def update_product(self, product_id: int, **kwargs) -> bool:
        return self.repo.update(product_id, **kwargs)

    def delete_product_by_name(self, name: str) -> bool:
        return self.repo.delete_by_name(name)

    def get_all(self) -> list[Product]:
        return self.repo.get_all()

    def get_by_barcode(self, barcode: str) -> Product | None:
        return self.repo.get_by_barcode(barcode)

    def get_by_id(self, id: int) -> Product | None:
        return self.repo.get_by_id(id)

    def get_by_name(self, name: str) -> Product | None:
        return self.repo.get_by_name(name)

    def get_by_category(self, category: str) -> list[Product]:
        return self.repo.get_by_category(category)

    def reorder_products(self, id1: int, id2: int):
        self.repo.swap_order(id1, id2)

================================================================================

Path: C:\FPOS\kpapython\kpa\database\bill_dao.py
--------------------------------------------------------------------------------
from sqlite3 import Row
from datetime import datetime

from core.models.bill import Bill, BillItem
from .db_manager import DBManager


class BillDAO:
    def __init__(self, db_path: str = "pos.db"):
        self.conn = DBManager.get_instance(db_path).get_connection()

    def create_bill(self, customer_id:str, date:str=None) -> int:
        date = date or datetime.now().isoformat()
        cur = self.conn.cursor()
        cur.execute(
            "INSERT INTO bills(customer_id,date) VALUES(?,?)",
            (customer_id, date),
        )
        self.conn.commit()
        return cur.lastrowid

    def add_item(self, bill_id:int, product_id:int, quantity:float, price:float) -> int:
        cur = self.conn.cursor()
        cur.execute(
            "INSERT INTO bill_items(bill_id,product_id,quantity,price) VALUES(?,?,?,?)",
            (bill_id, product_id, quantity, price),
        )
        # update bill total
        cur.execute(
            "UPDATE bills SET total = total + ? WHERE id = ?",
            (quantity * price, bill_id),
        )
        self.conn.commit()
        return cur.lastrowid

    def get_bill(self, bill_id:int) -> Bill|None:
        cur = self.conn.cursor()
        cur.execute("SELECT * FROM bills WHERE id=?", (bill_id,))
        row = cur.fetchone()
        if not row:
            return None
        bill = Bill(id=row["id"], customer_id=row["customer_id"], date=row["date"], total=row["total"])
        cur.execute("SELECT * FROM bill_items WHERE bill_id=?", (bill_id,))
        for r in cur.fetchall():
            bill.items.append(BillItem(r["id"], r["bill_id"], r["product_id"], r["quantity"], r["price"]))
        return bill

    def list_bills(self) -> list[Bill]:
        cur = self.conn.cursor()
        cur.execute("SELECT * FROM bills ORDER BY date DESC")
        bills = []
        for r in cur.fetchall():
            b = Bill(r["id"], r["customer_id"], r["date"], r["total"])
            bills.append(b)
        return bills

    def remove_item(self, item_id:int) -> bool:
        cur = self.conn.cursor()
        # get item to adjust total
        cur.execute("SELECT bill_id, quantity, price FROM bill_items WHERE id=?", (item_id,))
        item = cur.fetchone()
        if not item:
            return False
        cur.execute(
            "UPDATE bills SET total = total - ? WHERE id = ?",
            (item["quantity"] * item["price"], item["bill_id"]),
        )
        cur.execute("DELETE FROM bill_items WHERE id=?", (item_id,))
        self.conn.commit()
        return True

    def delete_bill(self, bill_id:int) -> bool:
        cur = self.conn.cursor()
        cur.execute("DELETE FROM bill_items WHERE bill_id=?", (bill_id,))
        cur.execute("DELETE FROM bills WHERE id=?", (bill_id,))
        self.conn.commit()
        return True
================================================================================

Path: C:\FPOS\kpapython\kpa\database\db_manager.py
--------------------------------------------------------------------------------
import sqlite3
from sqlite3 import Connection
import threading

class DBManager:
    _instance = None
    _lock = threading.Lock()

    def __init__(self, db_path: str = "pos.db"):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path, check_same_thread=False)
        self.conn.row_factory = sqlite3.Row
        self._init_schema()

    @classmethod
    def get_instance(cls, db_path: str = "pos.db"):
        with cls._lock:
            if cls._instance is None:
                cls._instance = cls(db_path)
        return cls._instance

    def _init_schema(self):
        cursor = self.conn.cursor()
        # products table
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS products (
            id            INTEGER PRIMARY KEY AUTOINCREMENT,
            name          TEXT    NOT NULL,
            price         REAL    NOT NULL,
            barcode       TEXT    UNIQUE,
            unit          TEXT,
            image_path    TEXT,
            order_index   INTEGER NOT NULL DEFAULT 0
        )""")
        # ensure order_index exists
        try:
            cursor.execute("ALTER TABLE products ADD COLUMN order_index INTEGER NOT NULL DEFAULT 0")
        except sqlite3.OperationalError:
            pass
        cursor.execute("UPDATE products SET order_index = id WHERE order_index = 0")

        # <<< NEW: category column, default 'manual' >>>
        try:
            cursor.execute(
                "ALTER TABLE products ADD COLUMN category TEXT NOT NULL DEFAULT 'manual'"
            )
        except sqlite3.OperationalError:
            # already added
            pass

        # bills & items
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS bills (
            id          INTEGER PRIMARY KEY AUTOINCREMENT,
            customer_id TEXT,
            date        TEXT,
            total       REAL    DEFAULT 0
        )""")
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS bill_items (
            id          INTEGER PRIMARY KEY AUTOINCREMENT,
            bill_id     INTEGER NOT NULL,
            product_id  INTEGER NOT NULL,
            quantity    REAL    NOT NULL,
            price       REAL    NOT NULL,
            FOREIGN KEY(bill_id) REFERENCES bills(id),
            FOREIGN KEY(product_id) REFERENCES products(id)
        )""")
        self.conn.commit()

    def get_connection(self) -> Connection:
        return self.conn

    def close(self):
        self.conn.close()
        DBManager._instance = None
================================================================================

Path: C:\FPOS\kpapython\kpa\database\product_repository.py
--------------------------------------------------------------------------------
from sqlite3 import Row

from core.models.product import Product
from .db_manager import DBManager

class ProductRepository:
    def __init__(self, db_path: str = "pos.db"):
        self.conn = DBManager.get_instance(db_path).get_connection()

    def create(
        self,
        name: str,
        price: float,
        barcode: str,
        unit: str,
        image_path: str,
        category: str = "manual"
    ) -> int:
        cur = self.conn.cursor()
        cur.execute(
            """
            INSERT INTO products
              (name, price, barcode, unit, image_path, category)
            VALUES (?, ?, ?, ?, ?, ?)
            """,
            (name, price, barcode or None, unit, image_path or None, category),
        )
        new_id = cur.lastrowid
        cur.execute("UPDATE products SET order_index = ? WHERE id = ?", (new_id, new_id))
        self.conn.commit()
        return new_id

    def get_all(self) -> list[Product]:
        cur = self.conn.cursor()
        cur.execute("SELECT * FROM products ORDER BY order_index, name")
        rows = cur.fetchall()
        return [self._row_to_obj(r) for r in rows]

    def get_by_category(self, category: str) -> list[Product]:
        cur = self.conn.cursor()
        cur.execute(
            "SELECT * FROM products WHERE category = ? ORDER BY order_index, name",
            (category,),
        )
        rows = cur.fetchall()
        return [self._row_to_obj(r) for r in rows]

    def get_by_barcode(self, barcode: str) -> Product | None:
        """Get product by barcode for scanning functionality"""
        cur = self.conn.cursor()
        cur.execute("SELECT * FROM products WHERE barcode = ?", (barcode,))
        row = cur.fetchone()
        return self._row_to_obj(row) if row else None

    def get_by_id(self, id: int) -> Product | None:
        cur = self.conn.cursor()
        cur.execute("SELECT * FROM products WHERE id = ?", (id,))
        row = cur.fetchone()
        return self._row_to_obj(row) if row else None

    def update(self, id: int, **fields) -> bool:
        allowed = {"name", "price", "barcode", "unit", "image_path", "order_index", "category"}
        setters = ", ".join(f"{k}=?" for k in fields if k in allowed)
        params = [fields[k] for k in fields if k in allowed] + [id]
        if not setters:
            return False
        self.conn.cursor().execute(f"UPDATE products SET {setters} WHERE id = ?", params)
        self.conn.commit()
        return True

    def delete(self, id: int) -> bool:
        cur = self.conn.cursor()
        cur.execute("DELETE FROM products WHERE id = ?", (id,))
        self.conn.commit()
        return cur.rowcount > 0

    def swap_order(self, id1: int, id2: int) -> None:
        cur = self.conn.cursor()
        cur.execute("SELECT order_index FROM products WHERE id = ?", (id1,))
        o1 = cur.fetchone()["order_index"]
        cur.execute("SELECT order_index FROM products WHERE id = ?", (id2,))
        o2 = cur.fetchone()["order_index"]
        cur.execute("UPDATE products SET order_index = ? WHERE id = ?", (o2, id1))
        cur.execute("UPDATE products SET order_index = ? WHERE id = ?", (o1, id2))
        self.conn.commit()

    def _row_to_obj(self, row: Row) -> Product:
        return Product(
            id = row["id"],
            name = row["name"],
            price = row["price"],
            barcode = row["barcode"],
            unit = row["unit"],
            image_path = row["image_path"],
            order_index = row["order_index"],
            category = row["category"],
        )

    def get_by_name(self, name) -> Product | None:
        """Get product by name, useful for editing"""
        cur = self.conn.cursor()
        cur.execute("SELECT * FROM products WHERE name = ?", (name,))
        row = cur.fetchone()
        return self._row_to_obj(row) if row else None

    def delete_by_name(self, name ) -> bool:
        """Delete product by name, useful for editing"""
        cur = self.conn.cursor()
        cur.execute("DELETE FROM products WHERE name = ?", (name,))
        self.conn.commit()
        return cur.rowcount > 0
================================================================================

Path: C:\FPOS\kpapython\kpa\ui\billing\action_buttons\logic.py
--------------------------------------------------------------------------------
from core.services.bill_service import BillService
from core.services.product_service import ProductService
from utils.print_pkg.printer_config import PrinterTester

from utils.logger import get_logger
log = get_logger(__name__)

class ActionButtonsLogic:
    def __init__(self):
        self.billing_list = None
        self.current_customer = "C1"
        self.billing_section = None
        self.printer_tester = PrinterTester()

        self._update_total_label = lambda val: None  # safe no-op
        self._printer = None

    def set_billing_list(self, billing_list):
        self.billing_list = billing_list

    def set_billing_section(self, billing_section):
        self.billing_section = billing_section

    def set_current_customer(self, customer_id):
        self.current_customer = customer_id

    def add_new_row(self):
        if not self.billing_list:
            return
        self.billing_list.add_item("New Item", 1, 5.00)
        self.update_bill_amount()

    def remove_selected_item(self):
        if not self.billing_list:
            return
        self.billing_list.remove_selected_item()
        self.update_bill_amount()

    def set_price_field(self):
        if self.billing_list and self.billing_list.selected_item_widget:
            item = self.billing_list.selected_item_widget
            self.billing_list.selected_field_name = "price"
            item.select_field("price")
            if hasattr(self.billing_list, 'keypad') and self.billing_list.keypad:
                self.billing_list.keypad.reset_input()

    def set_qty_field(self):
        if self.billing_list and self.billing_list.selected_item_widget:
            item = self.billing_list.selected_item_widget
            self.billing_list.selected_field_name = "qty"
            item.select_field("qty")
            if hasattr(self.billing_list, 'keypad') and self.billing_list.keypad:
                self.billing_list.keypad.reset_input()


    def process_bill(self):
        if not self.billing_list:
            return

        total = self.billing_list.get_current_customer_total()
        items = self.billing_list.get_current_customer_items()
        customer = self.billing_list.get_current_customer()
        bill_service = BillService()

        if self.billing_section and self.billing_section.current_editing_bill:
            bill_id = self.billing_section.current_editing_bill
            bill_service.clear_bill_items(bill_id)


        else:
            bill_id = bill_service.create_bill(customer_id=customer)
        self.service = ProductService()
        for item in items:
            product = self.service.get_by_name(item.item_name)
            if product:
                bill_service.add_item_to_bill(bill_id, product.id, item.qty, item.price)

        self.billing_list.clear_current_customer()

        if self.billing_section:
            self.billing_section.current_editing_bill = None
            self.billing_section.editing_bill_label.setText("")

        receipt_lines = []
        max_character = 48
        max_name_length = 22
        max_price_length = 7
        max_qty_length = 7
        max_amt_length = 7

        receipt_lines.append("-" * max_character)
        receipt_lines.append(
            f"{'No.':<4}{'Name':<{max_name_length}}{'Price':<{max_price_length}}"
            f"{'Qty':<{max_qty_length}}{'Amt':<{max_amt_length}}")
        receipt_lines.append("-" * max_character)

        for idx, item in enumerate(items, start=1):
            name = item.item_name[:max_name_length]
            price = f"{item.price:.2f}"[:max_price_length]
            qty = f"{item.qty}"[:max_qty_length]
            amount = f"{item.total():.2f}"[:max_amt_length]
            receipt_lines.append(
                f"{idx:<4}{name:<{max_name_length}}{price:<{max_price_length}}"
                f"{qty:<{max_qty_length}}{amount:<{max_amt_length}}")

        receipt_lines.append("-" * max_character)
        receipt_content = "\n".join(receipt_lines)

        try:
            if not self.printer_tester.is_printer_initialized():
                self.printer_tester.run()
            self.printer_tester.print_receipt(receipt_content, total=total)
        except Exception as e:
            log.info(f"Failed to print receipt: {e}")

        # 🔁 Refresh title bar buttons after new bill is created
        if self.billing_section and self.billing_section.title_bar_logic:
            self.billing_section.title_bar_logic.refresh_last_bills()

    def set_total_updater(self, callback):
        self._update_total_label = callback


    def update_bill_amount(self):
        if self.billing_list and hasattr(self, 'bill_amount_label'):
            total = self.billing_list.get_current_customer_total()
            self._update_total_label(f"BILL AMOUNT\n{total:.2f}")

    def set_printer(self, printer):
        self._printer = printer

================================================================================

Path: C:\FPOS\kpapython\kpa\ui\billing\action_buttons\ui.py
--------------------------------------------------------------------------------
from PyQt5.QtWidgets import QPushButton, QLabel, QGridLayout
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont

from ui.billing.action_buttons.logic import ActionButtonsLogic
from ui.utils.styles import ActionButtonStyles, GlobalStyles
from utils.constants import ACTION_BUTTON_WIDTH, ACTION_BUTTON_HEIGHT, BUTTON_SIZE



class ActionButtonsUI:
    def __init__(self, logic: ActionButtonsLogic, update_label_cb):
        self.logic = logic
        self.update_label_cb = update_label_cb  # or directly set label here

        self.buttons = {}
        self.weight_btn = None
        self.bill_amount_label = None

    def set_billing_section(self, billing_section):
        self.logic.set_billing_section(billing_section)

    def set_billing_list(self, billing_list):
        self.logic.set_billing_list(billing_list)

    def set_current_customer(self, customer_id):
        self.logic.set_current_customer(customer_id)

    def add_to_layout(self, layout):
        if not isinstance(layout, QGridLayout):
            raise TypeError("Layout must be QGridLayout")

        layout.addWidget(self._create_action_button("ADD ROW", self.logic.add_new_row, ActionButtonStyles.ADD_ROW_STYLE), 0, 0)
        layout.addWidget(self._create_action_button("DELETE ROW", self.logic.remove_selected_item, ActionButtonStyles.DELETE_ROW_STYLE), 1, 0)
        layout.addWidget(self._create_action_button("PRICE", self.logic.set_price_field, ActionButtonStyles.PRICE_STYLE), 1, 4)
        layout.addWidget(self._create_action_button("QTY", self.logic.set_qty_field, ActionButtonStyles.QTY_STYLE), 0, 4)

        self.weight_btn = self._create_weight_button()
        layout.addWidget(self.weight_btn, 2, 4)

        self.bill_amount_label = self._create_bill_amount_display()
        self.logic.bill_amount_label = self.bill_amount_label
        layout.addWidget(self.bill_amount_label, 2, 0)

        layout.addWidget(self._create_action_button("BILL", self.logic.process_bill, ActionButtonStyles.BILL_BUTTON_STYLE, True), 3, 0)

    def _create_action_button(self, text, handler, style, large_font=False):
        btn = QPushButton(text)
        font = QFont("Arial", 12 if large_font else 10, QFont.Bold)
        btn.setFont(font)
        btn.setStyleSheet(style)
        btn.setFixedSize(ACTION_BUTTON_WIDTH, BUTTON_SIZE if large_font else ACTION_BUTTON_HEIGHT)
        btn.clicked.connect(handler)
        self.buttons[text] = btn
        return btn

    def _create_weight_button(self):
        btn = QPushButton("Weight: 0.00 kg")
        btn.setFont(QFont("Arial", 10, QFont.Bold))
        btn.setStyleSheet(GlobalStyles.GLOBAL_STYLE)
        btn.setFixedSize(ACTION_BUTTON_WIDTH, BUTTON_SIZE)
        return btn

    def _create_bill_amount_display(self):
        label = QLabel("BILL AMOUNT\n0.00")
        label.setAlignment(Qt.AlignCenter)
        label.setFont(QFont("Arial", 10, QFont.Bold))
        label.setStyleSheet(ActionButtonStyles.BILL_AMOUNT_STYLE)
        label.setFixedSize(ACTION_BUTTON_WIDTH, BUTTON_SIZE)
        return label

================================================================================

Path: C:\FPOS\kpapython\kpa\ui\billing\billing_list\item_widget.py
--------------------------------------------------------------------------------
from PyQt5.QtWidgets import QFrame, QVBoxLayout, QHBoxLayout, QLabel
from PyQt5.QtCore import Qt, pyqtSignal
from PyQt5.QtGui import QFont

from ui.utils.styles import BillingListItemStyles


class BillingListItem(QFrame):
    item_clicked = pyqtSignal(object)
    fieldFocused = pyqtSignal(object, str)

    def __init__(self, item_data, parent=None):
        super().__init__(parent)
        self.item_data = item_data
        self.selected_field = None
        self.is_selected = False

        self.setFrameShape(QFrame.StyledPanel)
        self.setCursor(Qt.PointingHandCursor)
        self.setFixedHeight(60)
        self._update_style()
        self._setup_layout()

    def _setup_layout(self):
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(6, 4, 6, 4)
        main_layout.setSpacing(2)
        main_layout.addLayout(self._create_top_row())
        main_layout.addLayout(self._create_bottom_row())

    def _update_style(self):
        style = BillingListItemStyles.SELECTED_STYLE if self.is_selected else BillingListItemStyles.DEFAULT_STYLE
        self.setStyleSheet(style)

    def set_selected(self, selected):
        self.is_selected = selected
        self._update_style()

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.item_clicked.emit(self)
        super().mousePressEvent(event)

    def _create_label(self, text, font_size, font_weight=QFont.Normal, color="#333", extra_style="", alignment=Qt.AlignLeft | Qt.AlignVCenter):
        label = QLabel(text)
        label.setFont(QFont("Arial", font_size, font_weight))
        label.setStyleSheet(f"color: {color}; {extra_style}")
        label.setAlignment(alignment)
        return label

    def _create_top_row(self):
        layout = QHBoxLayout()

        count_label = self._create_label(
            f"#{self.item_data.item_count}", 9, QFont.Bold, "#666",
            BillingListItemStyles.COUNT_LABEL_STYLE,
            Qt.AlignCenter
        )
        count_label.setFixedWidth(32)

        name_label = self._create_label(
            self.item_data.item_name, 11, QFont.Bold
        )

        layout.addWidget(count_label)
        layout.addWidget(name_label, 1)
        return layout

    def _create_clickable_label(self, text, field_name):
        label = self._create_label(text, 9, color="#555")
        label.mousePressEvent = lambda e: self.select_field(field_name)
        return label

    def _create_bottom_row(self):
        layout = QHBoxLayout()

        self.qty_label = self._create_clickable_label(f"Qty: {self.item_data.qty}", "qty")
        self.price_label = self._create_clickable_label(f"Price: ₹{self.item_data.price:.2f}", "price")
        self.amount_label = self._create_label(
            f"₹{self.item_data.total():.2f}", 10, QFont.Bold, "#2E8B57",
            alignment=Qt.AlignRight | Qt.AlignVCenter
        )

        layout.addWidget(self.qty_label)
        layout.addWidget(self.price_label)
        layout.addStretch()
        layout.addWidget(self.amount_label)

        return layout

    def _update_field_highlight(self):
        field_styles = {
            "qty": BillingListItemStyles.HIGHLIGHT_STYLE if self.selected_field == "qty" else BillingListItemStyles.DEFAULT_FIELD_STYLE,
            "price": BillingListItemStyles.HIGHLIGHT_STYLE if self.selected_field == "price" else BillingListItemStyles.DEFAULT_FIELD_STYLE,
        }

        self.qty_label.setStyleSheet(field_styles["qty"])
        self.price_label.setStyleSheet(field_styles["price"])

    def select_field(self, field_name):
        if field_name in ("qty", "price"):
            self.selected_field = field_name
            self._update_field_highlight()
            self.fieldFocused.emit(self, field_name)


================================================================================

Path: C:\FPOS\kpapython\kpa\ui\billing\billing_list\logic.py
--------------------------------------------------------------------------------




class BillingItemData:
    def __init__(self, item_count, item_name, qty, price):
        self.item_count, self.item_name, self.qty, self.price = item_count, item_name, qty, price

    def total(self):
        return self.qty * self.price


class BillingListLogic:
    def __init__(self):
        self.customer_data = {f"C{i}": [] for i in range(1, 4)}
        self.item_counters = {f"C{i}": 1 for i in range(1, 4)}
        self.current_customer = "C1"
        self.selected_item_widget = None
        self.item_widgets = []
        self.keypad = None
        self.ui = None

    def set_ui(self, ui):
        self.ui = ui

    def _reset_keypad_if_available(self):
        if self.keypad:
            self.keypad.reset_input()

    def _on_item_clicked(self, clicked_item):
        self._reset_keypad_if_available()
        if self.selected_item_widget:
            self.selected_item_widget.set_selected(False)

        self.selected_item_widget = clicked_item
        clicked_item.set_selected(True)

        if self.ui.selected_field_name:
            clicked_item.select_field(self.ui.selected_field_name)

    def _on_fieldFocused(self, item, field):
        self._reset_keypad_if_available()

        for w in self.item_widgets:
            if w != item:
                w.set_selected(False)
                w.selected_field = None
                w._update_field_highlight()

        self.selected_item_widget = item
        self.ui.selected_field_name = field
        item.set_selected(True)

    def switch_customer(self, customer_id):
        if customer_id in self.customer_data:
            self.current_customer = customer_id
            self.selected_item_widget = None
            self.ui._display_current_customer_items()

    def add_item(self, name: str, qty: int, price: float):
        count = self.item_counters[self.current_customer]
        item_data = BillingItemData(count, name, qty, price)
        self.customer_data[self.current_customer].append(item_data)
        self.item_counters[self.current_customer] += 1
        self.ui._add_item_to_display(item_data)

    def remove_selected_item(self):
        if not self.selected_item_widget:
            return

        selected_id = self.selected_item_widget.item_data.item_count
        self.customer_data[self.current_customer] = [
            item for item in self.customer_data[self.current_customer]
            if item.item_count != selected_id
        ]
        self._renumber_items()
        self.ui._display_current_customer_items()
        self._select_last_item()

    def _renumber_items(self):
        items = self.customer_data[self.current_customer]
        for idx, item in enumerate(items):
            item.item_count = idx + 1
        self.item_counters[self.current_customer] = len(items) + 1

    def _select_last_item(self):
        self.selected_item_widget = self.item_widgets[-1] if self.item_widgets else None
        if self.selected_item_widget:
            self.selected_item_widget.set_selected(True)

    def clear_current_customer(self):
        self.customer_data[self.current_customer] = []
        self.item_counters[self.current_customer] = 1
        self.selected_item_widget = None
        self.ui._clear_display()

    def get_current_customer_total(self):
        return sum(item.total() for item in self.customer_data[self.current_customer])

    def get_current_customer_items(self):
        return self.customer_data[self.current_customer].copy()

    def get_current_customer(self):
        return self.current_customer

================================================================================

Path: C:\FPOS\kpapython\kpa\ui\billing\billing_list\ui.py
--------------------------------------------------------------------------------
from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QScrollArea

from ui.billing.billing_list.item_widget import BillingListItem
from ui.billing.billing_list.logic import BillingListLogic
from ui.utils.styles import BillingListStyles


class BillingListWidget(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.logic = BillingListLogic()
        self.logic.set_ui(self)
        self._selected_field_name = None

        self._setup_ui()
        self._display_current_customer_items()

    def set_keypad(self, keypad):
        self.logic.keypad = keypad

    def _setup_ui(self):
        self.main_layout = QVBoxLayout(self)
        self.scroll = QScrollArea()
        self.scroll.setWidgetResizable(True)
        self.scroll.setStyleSheet(BillingListStyles.SCROLL_STYLE)

        self.container = QWidget()
        self.container.setStyleSheet(BillingListStyles.CONTAINER_STYLE)

        self.list_layout = QVBoxLayout(self.container)
        self.list_layout.setSpacing(3)
        self.list_layout.setContentsMargins(5, 5, 5, 5)
        self.list_layout.addStretch()

        self.scroll.setWidget(self.container)
        self.main_layout.addWidget(self.scroll)
        self.main_layout.setContentsMargins(0, 0, 0, 0)

    def _scroll_to_bottom(self):
        QTimer.singleShot(10, lambda: self.scroll.verticalScrollBar().setValue(self.scroll.verticalScrollBar().maximum()))

    def _display_current_customer_items(self):
        self._clear_display()
        for item_data in self.logic.get_current_customer_items():
            self._add_item_to_display(item_data)

    def _clear_display(self):
        self.logic.item_widgets.clear()
        self.logic.selected_item_widget = None
        while self.list_layout.count() > 1:
            child = self.list_layout.takeAt(0)
            if child.widget():
                child.widget().deleteLater()

    def _add_item_to_display(self, item_data):
        self._remove_stretch_spacer()
        self._deselect_current_item()

        item = BillingListItem(item_data)
        item.item_clicked.connect(self.logic._on_item_clicked)
        item.fieldFocused.connect(self.logic._on_fieldFocused)

        self.logic.item_widgets.append(item)
        self.list_layout.addWidget(item)

        self.logic.selected_item_widget = item
        item.set_selected(True)
        self.list_layout.addStretch()

        if self.selected_field_name:
            item.select_field(self.selected_field_name)

        self._scroll_to_bottom()

    def _remove_stretch_spacer(self):
        if self.list_layout.count() > 0:
            last = self.list_layout.takeAt(self.list_layout.count() - 1)
            if last and last.spacerItem():
                del last

    def _deselect_current_item(self):
        if self.logic.selected_item_widget:
            self.logic.selected_item_widget.set_selected(False)

    def add_item(self, name, qty, price):
        self.logic.add_item(name, qty, price)

    def remove_selected_item(self):
        self.logic.remove_selected_item()

    @property
    def selected_item_widget(self):
        return self.logic.selected_item_widget

    @property
    def selected_field_name(self):
        return self._selected_field_name

    @selected_field_name.setter
    def selected_field_name(self, value):
        self._selected_field_name = value

    def get_current_customer_total(self):
        return self.logic.get_current_customer_total()

    def get_current_customer_items(self):
        return self.logic.get_current_customer_items()

    def get_current_customer(self):
        return self.logic.get_current_customer()

    def switch_customer(self, customer_id):
        self.logic.switch_customer(customer_id)
    def clear_current_customer(self):
        self.logic.clear_current_customer()



================================================================================

Path: C:\FPOS\kpapython\kpa\ui\billing\keypad\logic.py
--------------------------------------------------------------------------------
from PyQt5.QtWidgets import QWidget

from ui.billing.keypad.ui import BillingKeypadUI


class BillingKeypad(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.billing_list = None
        self.input_buffer = ""
        self.ui = BillingKeypadUI(self)

    def set_billing_list(self, billing_list):
        self.billing_list = billing_list

    def number_clicked(self, number):
        if not self.billing_list or not self.billing_list.selected_item_widget:
            return
        self.input_buffer += str(number)
        self._apply_input()

    def _apply_input(self):
        item = self.billing_list.selected_item_widget
        field = self.billing_list.selected_field_name
        if not item or not field:
            return
        try:
            if field == "qty":
                item.item_data.qty = int(self.input_buffer)
                item.qty_label.setText(f"Qty: {item.item_data.qty}")
            elif field == "price":
                item.item_data.price = float(self.input_buffer)
                item.price_label.setText(f"Price: ₹{item.item_data.price:.2f}")
            item.amount_label.setText(f"₹{item.item_data.total():.2f}")
        except ValueError:
            pass

    def button_clicked(self, button_name):
        if button_name == "X":
            self.input_buffer = ""
            self._apply_input()
        elif button_name == ".":
            if "." not in self.input_buffer:
                self.input_buffer += "." if self.input_buffer else "0."
                self._apply_input()

    def reset_input(self):
        self.input_buffer = ""

    def add_to_layout(self, layout):
        self.ui.add_buttons_to(layout)

================================================================================

Path: C:\FPOS\kpapython\kpa\ui\billing\keypad\ui.py
--------------------------------------------------------------------------------
from PyQt5.QtWidgets import QPushButton

from ui.utils.styles import BillingKeypadStyles
from utils.constants import BUTTON_SIZE

class BillingKeypadUI:
    def __init__(self, logic):
        self.logic = logic
        self.buttons = {}

    def add_buttons_to(self, layout):
        nums = [(1, 0, 1), (2, 0, 2), (3, 0, 3), (4, 1, 1), (5, 1, 2), (6, 1, 3),
                (7, 2, 1), (8, 2, 2), (9, 2, 3), (0, 3, 2)]
        for num, row, col in nums:
            btn = self._create_number_button(num)
            layout.addWidget(btn, row, col)

        layout.addWidget(self._create_op_button(".", BillingKeypadStyles.PLUS_MINUS_STYLE), 3, 1)
        layout.addWidget(self._create_op_button("X", BillingKeypadStyles.CLEAR_STYLE), 3, 3)

    def _create_number_button(self, num):
        btn = QPushButton(str(num))
        btn.setStyleSheet(BillingKeypadStyles.NUMBER_STYLE)
        btn.setFixedSize(BUTTON_SIZE, BUTTON_SIZE)
        btn.clicked.connect(lambda: self.logic.number_clicked(num))
        self.buttons[str(num)] = btn
        return btn

    def _create_op_button(self, symbol, style):
        btn = QPushButton(symbol)
        btn.setStyleSheet(style)
        btn.setFixedSize(BUTTON_SIZE, BUTTON_SIZE)
        btn.clicked.connect(lambda: self.logic.button_clicked(symbol))
        self.buttons[symbol] = btn
        return btn
================================================================================

Path: C:\FPOS\kpapython\kpa\ui\billing\section\logic.py
--------------------------------------------------------------------------------
from core.services.bill_service import BillService
from core.services.product_service import ProductService
from ui.billing.action_buttons.logic import ActionButtonsLogic
from ui.billing.action_buttons.ui import ActionButtonsUI
from ui.billing.billing_list.ui import BillingListWidget
from ui.billing.keypad.logic import BillingKeypad
from ui.billing.section.ui import BillingSectionUI
from ui.utils.styles import BillingStyles
from ui.utils.ui_helpers import toggle_visibility

from utils.logger import get_logger
log = get_logger(__name__)


class BillingSection:
    def __init__(self, title_bar_logic=None):
        self.title_bar_logic = title_bar_logic
        # Core components
        self.billing_list = BillingListWidget()
        self.keypad = BillingKeypad()
        self.action_buttons_logic = ActionButtonsLogic()
        self.action_buttons_ui = ActionButtonsUI(self.action_buttons_logic, self._update_total_label)

        # Logic state
        self.customer_buttons = {}
        self.editing_bill_label = None
        self.current_editing_bill = None
        self.save_button = None
        self.cancel_button = None

        # Setup callbacks and shared objects
        self.action_buttons_logic.set_total_updater(self._update_total_label)
        self.action_buttons_logic.set_printer(self._get_printer_instance())

        # Wire component dependencies
        self._wire_components()

        # Build UI using references
        self.ui_builder = BillingSectionUI(self)



    def _wire_components(self):
        self.keypad.set_billing_list(self.billing_list)
        self.billing_list.set_keypad(self.keypad)
        self.action_buttons_logic.set_billing_list(self.billing_list)
        self.action_buttons_logic.set_billing_section(self)

    def _get_printer_instance(self):
        # Lazy init to avoid duplicate instances
        if not hasattr(self, '_printer_instance'):
            from utils.print_pkg.printer_config import PrinterTester
            self._printer_instance = PrinterTester()
        return self._printer_instance

    def create_billing_section(self):
        return self.ui_builder.create_ui()

    # --- Logic ---
    def _toggle_editing_ui(self, visible):
        toggle_visibility([self.editing_bill_label, self.save_button, self.cancel_button], visible)

    def _save_changes(self):
        if self.current_editing_bill:
            self.action_buttons_logic.process_bill()
            self.current_editing_bill = None
            self.editing_bill_label.setText("")
            self._toggle_editing_ui(False)

        # 🔁 Refresh title bar bill buttons
        if self.title_bar_logic:
            self.title_bar_logic.refresh_last_bills()

    def _cancel_changes(self):
        self.billing_list.clear_current_customer()
        self.current_editing_bill = None
        self.editing_bill_label.setText("")
        self._toggle_editing_ui(False)

    def load_bill(self, bill_id):
        bill_service = BillService()
        bill = bill_service.get_bill(bill_id)
        if not bill:
            log.info(f"Bill {bill_id} not found!")
            return

        self.billing_list.clear_current_customer()
        product_service = ProductService()
        for item in bill.items:
            product = product_service.get_by_id(item.product_id)
            if product:
                self.billing_list.add_item(product.name, item.quantity, item.price)

        self.current_editing_bill = bill_id
        self.editing_bill_label.setText(f"Editing Bill {bill_id}")
        self._toggle_editing_ui(True)

    # --- Event Handlers ---
    def _on_customer_click(self, customer_name):
        log.info(f"Customer {customer_name} clicked")
        self._switch_to_customer(customer_name)
        self._highlight_selected_customer(customer_name)
        self._update_action_buttons(customer_name)

    def _switch_to_customer(self, customer_name):
        if self.billing_list:
            self.billing_list.switch_customer(customer_name)

    def _highlight_selected_customer(self, customer_name):
        self._update_customer_button_styles(customer_name)

    def _update_customer_button_styles(self, selected_customer):
        for customer_id, button in self.customer_buttons.items():
            if customer_id == selected_customer:
                button.setStyleSheet(BillingStyles.CUSTOMER_BUTTON_SELECTED_STYLE)
            else:
                button.setStyleSheet(BillingStyles.CUSTOMER_BUTTON_STYLE)

    def _update_action_buttons(self, customer_name):
        if self.action_buttons_logic:
            self.action_buttons_logic.set_current_customer(customer_name)
            self.action_buttons_logic.update_bill_amount()

    def _update_total_label(self, total_text):
        if hasattr(self.action_buttons_ui, 'bill_amount_label'):
            self.action_buttons_ui.bill_amount_label.setText(total_text)
================================================================================

Path: C:\FPOS\kpapython\kpa\ui\billing\section\ui.py
--------------------------------------------------------------------------------
from PyQt5.QtWidgets import (
    QFrame, QVBoxLayout, QHBoxLayout, QGridLayout, QPushButton, QLabel, QSizePolicy
)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont

from ui.utils.styles import BillingStyles


class BillingSectionUI:
    def __init__(self, logic):
        self.logic = logic

    def create_ui(self):
        billing_frame = QFrame()
        billing_frame.setStyleSheet(BillingStyles.FRAME_STYLE)

        main_layout = QVBoxLayout(billing_frame)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(5)

        self._add_editing_label(main_layout)
        self._add_save_cancel_buttons(main_layout)
        main_layout.addWidget(self._build_customer_section(), stretch=0)
        self._add_billing_list(main_layout)
        main_layout.addWidget(self._build_keypad_area(), stretch=0)

        return billing_frame

    def _add_editing_label(self, layout):
        self.logic.editing_bill_label = QLabel("")
        self.logic.editing_bill_label.setStyleSheet(BillingStyles.EDITING_BILL_LABEL_STYLE)
        self.logic.editing_bill_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.logic.editing_bill_label, stretch=0)

    def _add_save_cancel_buttons(self, layout):
        save_cancel_layout = QHBoxLayout()
        self.logic.save_button = QPushButton("Save")
        self.logic.save_button.clicked.connect(self.logic._save_changes)
        self.logic.cancel_button = QPushButton("Cancel")
        self.logic.cancel_button.clicked.connect(self.logic._cancel_changes)
        save_cancel_layout.addWidget(self.logic.save_button)
        save_cancel_layout.addWidget(self.logic.cancel_button)
        layout.addLayout(save_cancel_layout)
        self.logic._toggle_editing_ui(False)

    def _build_customer_section(self):
        customer_frame = QFrame()
        customer_frame.setStyleSheet(BillingStyles.CUSTOMER_FRAME_STYLE)
        layout = QGridLayout(customer_frame)
        layout.setContentsMargins(5, 5, 5, 5)
        layout.setSpacing(5)

        for i in range(1, 4):
            customer_id = f"C{i}"
            button = QPushButton(customer_id)
            button.setStyleSheet(BillingStyles.CUSTOMER_BUTTON_STYLE)
            button.setFont(QFont("Arial", 10, QFont.Bold))
            button.setCursor(Qt.PointingHandCursor)
            button.clicked.connect(lambda _, cid=customer_id: self.logic._on_customer_click(cid))
            layout.addWidget(button, 0, i - 1)
            self.logic.customer_buttons[customer_id] = button

        return customer_frame

    def _add_billing_list(self, layout):
        self.logic.billing_list.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        layout.addWidget(self.logic.billing_list, stretch=1)

    def _build_keypad_area(self):
        keypad_frame = QFrame()
        layout = QGridLayout(keypad_frame)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(5)

        self.logic.keypad.add_to_layout(layout)
        self.logic.action_buttons_ui.add_to_layout(layout)

        return keypad_frame

================================================================================

Path: C:\FPOS\kpapython\kpa\ui\main\pos_event_handler.py
--------------------------------------------------------------------------------
from PyQt5.QtWidgets import QMessageBox
from core.services.product_service import ProductService


class POSEventHandler:
    def __init__(self, billing_list):
        self.billing_list = billing_list
        self.service = ProductService()

    def handle_product_click(self, product):
        if product:
            self.billing_list.add_item(name=product.name, qty=1, price=product.price)

    def handle_barcode(self, barcode):
        try:
            product = self.service.get_by_barcode(barcode)
            if product:
                self.billing_list.add_item(product.name, 1, product.price)
            else:
                QMessageBox.warning(None, "Not Found", f"No product for barcode: {barcode}")
        except Exception as e:
            QMessageBox.critical(None, "Error", f"Barcode error: {e}")

================================================================================

Path: C:\FPOS\kpapython\kpa\ui\main\pos_main_controller.py
--------------------------------------------------------------------------------
# 📁 ui/main/pos_main_controller.py

from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtCore import Qt

from core.services.product_service import ProductService
from ui.main.pos_main_ui import POSMainUI
from ui.title_bar.logic import CustomTitleBarLogic
from ui.main.pos_event_handler import POSEventHandler
from utils.constants import DEFAULT_CATEGORY


class POSMainController(POSMainUI):
    def __init__(self):
        self.title_bar_logic = CustomTitleBarLogic(self)
        super().__init__(self.title_bar_logic)
        self.product_service = ProductService()
        self.event_handler = POSEventHandler(self.billing_section.billing_list)

        self._connect_signals()

    def _connect_signals(self):
        products_sec = self.main_content.products_sec

        products_sec.on_product_click = self.event_handler.handle_product_click
        self.title_bar.show_category.connect(self._on_category_changed)
        self.title_bar.barcode_scanned.connect(self.event_handler.handle_barcode)
        self.title_bar.load_bill.connect(self.billing_section.load_bill)

        products_sec.set_category(DEFAULT_CATEGORY)

    def _on_category_changed(self, category):
        self.main_content.products_sec.set_category(category)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            self.close()
        super().keyPressEvent(event)

================================================================================

Path: C:\FPOS\kpapython\kpa\ui\main\pos_main_ui.py
--------------------------------------------------------------------------------
# pos_main_ui.py

from PyQt5.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout
from PyQt5.QtCore import Qt

from ui.billing.section.logic import BillingSection
from ui.product.main_area import MainContent
from ui.title_bar.ui import CustomTitleBar

from ui.utils.styles import GlobalStyles
from utils.constants import BILLING_SECTION_WIDTH

class POSMainUI(QWidget):
    def __init__(self, title_bar_logic, parent=None):
        super().__init__(parent)
        self.title_bar = CustomTitleBar(logic=title_bar_logic, parent=self)
        self.main_content = MainContent()
        self.billing_section = BillingSection(title_bar_logic=title_bar_logic)

        self._setup_ui()
        self.billing_section.action_buttons_ui.title_bar = self.title_bar

    def _setup_ui(self):
        self.setWindowTitle("My POS System")
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.showFullScreen()

        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)
        main_layout.addWidget(self.title_bar)

        content_layout = QHBoxLayout()
        content_widget = QWidget()
        content_widget.setLayout(content_layout)

        left = self.main_content.create_main_content_area()
        content_layout.addWidget(left, 3)

        right = self.billing_section.create_billing_section()
        right.setFixedWidth(BILLING_SECTION_WIDTH)
        content_layout.addWidget(right, 1)

        main_layout.addWidget(content_widget)
        self.setStyleSheet(GlobalStyles.GLOBAL_STYLE)

================================================================================

Path: C:\FPOS\kpapython\kpa\ui\product\editor.py
--------------------------------------------------------------------------------
import os
import uuid

from PyQt5.QtWidgets import (
    QDialog, QVBoxLayout, QFormLayout, QLineEdit, QComboBox,
    QPushButton, QFileDialog, QHBoxLayout, QMessageBox,
    QRadioButton, QButtonGroup
)
from PyQt5.QtGui import QPixmap, QIcon
from PyQt5.QtCore import QSize, Qt

from core.services.product_service import ProductService

# store thumbnails here
IMAGE_DIR = os.path.join(os.getcwd(), "product_images")
os.makedirs(IMAGE_DIR, exist_ok=True)


class ProductEditorDialog(QDialog):
    def __init__(self, parent=None, product=None):
        super().__init__(parent)
        self.setWindowTitle("Edit Product" if product else "Create Product")
        self.existing_product = product
        self.new_image_filename = None
        # display → stored category
        self._category_map = {
            "Fruits & Vegetables": "fruits_veg",
            "Manual":              "manual",
            "Barcode Only":        "barcode_only",
        }
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout(self)
        form = QFormLayout()

        self.name_edit = QLineEdit()
        form.addRow("Name:", self.name_edit)

        self.price_edit = QLineEdit()
        form.addRow("Price:", self.price_edit)

        self.barcode_edit = QLineEdit()
        form.addRow("Barcode:", self.barcode_edit)

        self.unit_edit = QComboBox()
        self.unit_edit.addItems(["kg", "pcs"])
        form.addRow("Unit:", self.unit_edit)

        # category radio-group
        cat_layout = QHBoxLayout()
        self.category_group = QButtonGroup(self)
        for idx, label in enumerate(self._category_map):
            rb = QRadioButton(label)
            if idx == 0:
                rb.setChecked(True)
            self.category_group.addButton(rb, id=idx)
            cat_layout.addWidget(rb)
        form.addRow("Category:", cat_layout)

        # image selection button
        self.image_btn = QPushButton("Select Image")
        self.image_btn.setIconSize(QSize(200, 200))
        self.image_btn.clicked.connect(self.browse_image)
        form.addRow("Image:", self.image_btn)

        layout.addLayout(form)

        # Save / Cancel
        btn_h = QHBoxLayout()
        btn_h.addStretch()
        self.save_btn = QPushButton("Save")
        self.save_btn.clicked.connect(self.save_product)
        self.cancel_btn = QPushButton("Cancel")
        self.cancel_btn.clicked.connect(self.reject)
        btn_h.addWidget(self.save_btn)
        btn_h.addWidget(self.cancel_btn)
        layout.addLayout(btn_h)

        if self.existing_product:
            self.name_edit.setText(self.existing_product.name)
            self.price_edit.setText(str(self.existing_product.price))
            self.barcode_edit.setText(self.existing_product.barcode or "")
            self.unit_edit.setCurrentText(self.existing_product.unit)
            category_key = self.existing_product.category
            for i, label in enumerate(self._category_map):
                if self._category_map[label] == category_key:
                    self.category_group.button(i).setChecked(True)
            if self.existing_product.image_path:
                image_path = os.path.join(IMAGE_DIR, self.existing_product.image_path)
                if os.path.exists(image_path):
                    self.image_btn.setIcon(QIcon(image_path))
                    self.image_btn.setText("")

    def browse_image(self):
        src_path, _ = QFileDialog.getOpenFileName(
            self, "Select Image", "", "Images (*.png *.jpg *.jpeg *.bmp)"
        )
        if not src_path:
            return

        # determine new random filename + keep ext
        ext = os.path.splitext(src_path)[1].lower()
        new_name = f"{uuid.uuid4().hex}{ext}"
        dst_path = os.path.join(IMAGE_DIR, new_name)

        # load, scale & save
        pix = QPixmap(src_path)
        if pix.isNull():
            QMessageBox.warning(self, "Error", "Could not load image.")
            return

        scaled = pix.scaled(200, 200, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        if not scaled.save(dst_path):
            QMessageBox.warning(self, "Error", "Failed to save resized image.")
            return

        # remember the filename for DB, update button
        self.new_image_filename = new_name
        self.image_btn.setIcon(QIcon(dst_path))
        self.image_btn.setText("")  # remove text once image is set

    def save_product(self):
        name = self.name_edit.text().strip()
        price_txt = self.price_edit.text().strip()
        barcode = self.barcode_edit.text().strip() or None
        unit = self.unit_edit.currentText()
        image_filename = self.new_image_filename or None

        if not name or not price_txt:
            QMessageBox.warning(self, "Input Error", "Name and Price are required.")
            return

        try:
            price = float(price_txt)
        except ValueError:
            QMessageBox.warning(self, "Input Error", "Price must be a number.")
            return

        # determine selected category
        checked_id = self.category_group.checkedId()
        display_labels = list(self._category_map.keys())
        cat_label = display_labels[checked_id]
        category = self._category_map.get(cat_label, "barcode_only")

        self.service = ProductService()
        try:
            if self.existing_product:
                self.service.update_product(
                    self.existing_product.id,
                    name=name,
                    price=price,
                    barcode=barcode,
                    unit=unit,
                    category=category,
                    image_path=image_filename
                )
                QMessageBox.information(self, "Success", "Product updated.")
            else:
                self.service.create_product(
                    name=name,
                    price=price,
                    barcode=barcode,
                    unit=unit,
                    image_path=image_filename,
                    category=category
                )
                QMessageBox.information(self, "Success", "Product created.")
            self.accept()
        except Exception as e:
            QMessageBox.critical(self, "Error", str(e))
================================================================================

Path: C:\FPOS\kpapython\kpa\ui\product\main_area.py
--------------------------------------------------------------------------------
import os

from PyQt5.QtCore import Qt, QSize
from PyQt5.QtGui import QFont, QIcon, QPixmap
from PyQt5.QtWidgets import *

from core.services.product_service import ProductService
from utils.constants import (
    IMAGE_DIR, PRODUCTS_PER_ROW, PRODUCT_GRID_SPACING,
    PRODUCT_BUTTON_WIDTH, PRODUCT_BUTTON_HEIGHT, PRODUCT_ICON_SIZE,
    PRODUCT_BUTTON_FONT_FAMILY, PRODUCT_BUTTON_FONT_SIZE,
    DEFAULT_CATEGORY
)
from ui.utils.styles import ProductStyles, ProductButtonStyles, MainContentStyles


class ProductsSection:
    def __init__(self):
        self.service = ProductService()
        self.container = self.scroll_area = None
        self.current_category = DEFAULT_CATEGORY
        self.on_product_click = None

    def create_products_section(self):
        self.container = QFrame()
        self.container.setStyleSheet(ProductStyles.FRAME_STYLE)
        layout = QVBoxLayout(self.container)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        self.scroll_area = self._make_scroll_area()
        layout.addWidget(self.scroll_area)
        return self.container

    def set_category(self, category):
        self.current_category = category
        self.refresh()

    def refresh(self):
        if not self.container or not self.scroll_area:
            return
        layout = self.container.layout()
        layout.removeWidget(self.scroll_area)
        self.scroll_area.deleteLater()
        self.scroll_area = self._make_scroll_area()
        layout.addWidget(self.scroll_area)

    def _make_scroll_area(self):
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)

        holder = QWidget()
        grid = QGridLayout(holder)
        grid.setSpacing(PRODUCT_GRID_SPACING)

        products = self.service.get_by_category(self.current_category)
        for idx, p in enumerate(products):
            btn = self._make_button(p)
            grid.addWidget(btn, idx // PRODUCTS_PER_ROW, idx % PRODUCTS_PER_ROW, Qt.AlignCenter)

        scroll.setWidget(holder)
        return scroll

    def _make_button(self, product):
        btn = QToolButton()
        btn.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
        btn.setFixedSize(PRODUCT_BUTTON_WIDTH, PRODUCT_BUTTON_HEIGHT)
        btn.setIcon(self._load_icon(product))
        btn.setIconSize(QSize(PRODUCT_ICON_SIZE, PRODUCT_ICON_SIZE))
        btn.setText(f"{product.name}\n${product.price:.2f}")
        btn.setFont(QFont(PRODUCT_BUTTON_FONT_FAMILY, PRODUCT_BUTTON_FONT_SIZE, QFont.Bold))
        btn.setCursor(Qt.PointingHandCursor)
        btn.setStyleSheet(ProductButtonStyles.BUTTON_STYLE)
        btn.clicked.connect(lambda _, p=product: self._on_click(p))
        return btn

    def _load_icon(self, product):
        if product.image_path:
            img_file = product.image_path if os.path.isabs(product.image_path) else os.path.join(IMAGE_DIR,
                                                                                                 product.image_path)
            if os.path.exists(img_file):
                return QIcon(img_file)
        pix = QPixmap(PRODUCT_ICON_SIZE, PRODUCT_ICON_SIZE)
        pix.fill(Qt.lightGray)
        return QIcon(pix)

    def _on_click(self, product):
        if product and callable(self.on_product_click):
            self.on_product_click(product)


class MainContent:
    def __init__(self):
        self.products_sec = ProductsSection()

    def create_main_content_area(self):
        frame = QWidget()
        frame.setStyleSheet(MainContentStyles.FRAME_STYLE)
        layout = QVBoxLayout(frame)
        layout.addWidget(self.products_sec.create_products_section())
        layout.setSpacing(0)
        return frame

================================================================================

Path: C:\FPOS\kpapython\kpa\ui\product\manager_dialog.py
--------------------------------------------------------------------------------
from PyQt5.QtWidgets import (
    QDialog, QVBoxLayout, QTabWidget, QWidget, QToolButton,
    QPushButton, QHBoxLayout, QMessageBox, QGridLayout, QScrollArea
)
from PyQt5.QtCore import Qt, QSize
from PyQt5.QtGui import QIcon, QFont, QPixmap
from core.services.product_service import ProductService
import os

from ui.product.editor import ProductEditorDialog
from ui.utils.styles import GlobalStyles

IMAGE_DIR = os.path.join(os.getcwd(), "product_images")
PRODUCT_ICON_SIZE = 128
PRODUCT_GRID_COLUMNS = 3


class ProductManagementDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Product Management")
        self.service = ProductService()
        self.tabs = {}
        self.selected_btn = None
        self.selected_product = None
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout(self)

        self.tab_widget = QTabWidget()
        for category in ["fruits_veg", "manual", "barcode_only"]:
            self.tabs[category] = self._create_product_grid(category)
            self.tab_widget.addTab(self.tabs[category]["widget"], category.replace("_", " ").title())
        layout.addWidget(self.tab_widget)

        # Control Buttons
        btn_layout = QHBoxLayout()
        self.add_btn = QPushButton("Add Product")
        self.add_btn.clicked.connect(self._add_product)
        self.edit_btn = QPushButton("Edit Product")
        self.edit_btn.clicked.connect(self._edit_product)
        self.delete_btn = QPushButton("Delete Product")
        self.delete_btn.clicked.connect(self._delete_product)
        btn_layout.addWidget(self.add_btn)
        btn_layout.addWidget(self.edit_btn)
        btn_layout.addWidget(self.delete_btn)
        layout.addLayout(btn_layout)

    def _create_product_grid(self, category):
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)

        content_widget = QWidget()
        grid = QGridLayout(content_widget)
        scroll_area.setWidget(content_widget)

        return {
            "widget": scroll_area,
            "grid": grid,
            "category": category,
            "buttons": [],
            "content_widget": content_widget,
        }

    def _load_grid(self, tab):
        # Clear old buttons
        layout = tab["grid"]
        for i in reversed(range(layout.count())):
            layout.itemAt(i).widget().deleteLater()
        tab["buttons"] = []
        tab["selected_btn"] = None

        # Load new buttons
        products = self.service.get_by_category(tab["category"])
        for i, product in enumerate(products):
            btn = self._make_product_button(product)
            layout.addWidget(btn, i // PRODUCT_GRID_COLUMNS, i % PRODUCT_GRID_COLUMNS)
            tab["buttons"].append((btn, product))

    def _make_product_button(self, product):
        btn = QToolButton()
        btn.setFixedSize(160, 160)
        btn.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
        btn.setIcon(self._get_icon(product.image_path))
        btn.setIconSize(QSize(PRODUCT_ICON_SIZE, PRODUCT_ICON_SIZE))
        btn.setText(f"{product.name}\n₹{product.price:.2f}")
        btn.setFont(QFont("Arial", 9, QFont.Bold))
        btn.setCheckable(True)
        btn.setStyleSheet(GlobalStyles.GLOBAL_STYLE)
        btn.clicked.connect(lambda: self._select_product(btn, product))
        return btn

    def _get_icon(self, image_path) -> QIcon:
        full_path = os.path.join(IMAGE_DIR, image_path) if image_path else ""
        if os.path.exists(full_path):
            return QIcon(full_path)
        else:
            pix = QPixmap(PRODUCT_ICON_SIZE, PRODUCT_ICON_SIZE)
            pix.fill(Qt.lightGray)
            return QIcon(pix)

    def _select_product(self, btn, product):
        # Uncheck old
        if self.selected_btn:
            self.selected_btn.setChecked(False)

        # Select new
        btn.setChecked(True)
        self.selected_btn = btn
        self.selected_product = product

    def _get_current_tab(self):
        return self.tabs[list(self.tabs.keys())[self.tab_widget.currentIndex()]]

    def _add_product(self):
        dlg = ProductEditorDialog(self)
        if dlg.exec_() == QDialog.Accepted:
            self._refresh_tabs()

    def _edit_product(self):
        if not self.selected_product:
            QMessageBox.warning(self, "No Selection", "Please select a product to edit.")
            return
        dlg = ProductEditorDialog(self, product=self.selected_product)
        if dlg.exec_() == QDialog.Accepted:
            self._refresh_tabs()

    def _delete_product(self):
        if not self.selected_product:
            QMessageBox.warning(self, "No Selection", "Please select a product to delete.")
            return
        name = self.selected_product.name
        confirm = QMessageBox.question(
            self, "Confirm Delete", f"Delete product '{name}'?",
            QMessageBox.Yes | QMessageBox.No
        )
        if confirm == QMessageBox.Yes:
            self.service.delete_product_by_name(name)
            self._refresh_tabs()

    def _refresh_tabs(self):
        for tab in self.tabs.values():
            self._load_grid(tab)
        self.selected_product = None
        self.selected_btn = None

    def showEvent(self, event):
        super().showEvent(event)
        self._refresh_tabs()

================================================================================

Path: C:\FPOS\kpapython\kpa\ui\product\order_dialog.py
--------------------------------------------------------------------------------
from PyQt5.QtWidgets import *
from core.services.product_service import ProductService

class OrderProductsDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Order Products")
        self.service = ProductService()  # Use ProductService instead of ProductRepository
        self.current_category = "fruits_veg"
        self.products = []
        self._build_ui()
        self._load_products()

    def _build_ui(self):
        layout = QVBoxLayout(self)

        # Category selector
        cat_layout = QHBoxLayout()
        cat_layout.addWidget(QLabel("Category:"))
        self.category_combo = QComboBox()
        self.category_combo.addItems(["Fruits & Vegetables", "Manual"])
        self.category_combo.currentTextChanged.connect(self._on_category_changed)
        cat_layout.addWidget(self.category_combo)
        cat_layout.addStretch()
        layout.addLayout(cat_layout)

        # Products list
        self.list_widget = QListWidget()
        layout.addWidget(self.list_widget)

        # Move buttons
        btn_layout = QHBoxLayout()
        for text, slot in [("Move Up", self._move_up), ("Move Down", self._move_down)]:
            btn = QPushButton(text)
            btn.clicked.connect(slot)
            btn_layout.addWidget(btn)
        layout.addLayout(btn_layout)

        # Save/Cancel
        save_layout = QHBoxLayout()
        save_layout.addStretch()
        for text, slot in [("Save & Close", self.accept), ("Cancel", self.reject)]:
            btn = QPushButton(text)
            btn.clicked.connect(slot)
            save_layout.addWidget(btn)
        layout.addLayout(save_layout)

    def _on_category_changed(self, text):
        self.current_category = {"Fruits & Vegetables": "fruits_veg", "Manual": "manual"}[text]
        self._load_products()

    def _load_products(self):
        self.list_widget.clear()
        self.products = self.service.get_by_category(self.current_category)  # Use ProductService
        [self.list_widget.addItem(f"{p.name} (${p.price:.2f})") for p in self.products]

    def _move_up(self):
        self._move(-1)

    def _move_down(self):
        self._move(1)

    def _move(self, direction):
        row = self.list_widget.currentRow()
        target = row + direction
        if 0 <= target < len(self.products):
            self.service.reorder_products(self.products[row].id, self.products[target].id)  # Use ProductService
            self._load_products()
================================================================================

Path: C:\FPOS\kpapython\kpa\ui\title_bar\logic.py
--------------------------------------------------------------------------------
# custom_title_bar_logic.py

from PyQt5.QtWidgets import QMessageBox, QPushButton, QMenu, QAction, QDialog
from PyQt5.QtCore import QPoint
from core.services.bill_service import BillService
from ui.product.editor import ProductEditorDialog
from ui.product.manager_dialog import ProductManagementDialog
from ui.product.order_dialog import OrderProductsDialog
from utils.print_pkg.printer_config import PrinterTester
from ui.utils.styles import TitleBarStyles

from utils.logger import get_logger
log = get_logger(__name__)


class CustomTitleBarLogic:
    def __init__(self, parent=None):
        self.parent = parent
        self.bill_service = BillService()
        self.last_bill_buttons = []
        self.ui = None

    def connect_signals(self, ui):
        self.ui = ui

    def on_load_bill(self):
        bill_id = self.ui.bill_input.text().strip()
        if bill_id.isdigit():
            self.ui.load_bill.emit(int(bill_id))
            self.ui.bill_input.clear()
        else:
            QMessageBox.warning(self.ui, "Invalid Input", "Please enter a valid bill ID.")

    def add_last_bill_buttons(self, layout):
        self.last_bill_buttons.clear()
        for _ in range(3):
            btn = QPushButton()
            btn.setFixedSize(120, 40)
            btn.setStyleSheet(TitleBarStyles.LAST_BILL_BUTTON_STYLE)
            btn.clicked.connect(self._on_last_bill_clicked)
            self.last_bill_buttons.append(btn)
            layout.addWidget(btn)
        self.refresh_last_bills()

    def refresh_last_bills(self):
        bills = self.bill_service.list_bills()[:3]
        for i, btn in enumerate(self.last_bill_buttons):
            if i < len(bills):
                bill = bills[i]
                btn.setText(f"Bill {bill.id}\n₹{bill.total:.2f}")
                btn.setProperty("bill_id", bill.id)
                btn.setEnabled(True)
            else:
                btn.setText("No Bill")
                btn.setEnabled(False)

    def _on_last_bill_clicked(self):
        bill_id = self.ui.sender().property("bill_id")
        if bill_id:
            self.ui.load_bill.emit(bill_id)

    def on_barcode_entered(self):
        barcode = self.ui.barcode_input.text().strip()
        if barcode:
            self.ui.barcode_scanned.emit(barcode)
            self.ui.barcode_input.clear()

    def show_menu(self):
        menu = QMenu(self.ui)
        menu.setStyleSheet(TitleBarStyles.MENU_STYLE)

        items = [
            ("➕ Create Product", self._open_create_product),
            ("↕️ Order Products", self._open_order_products),
            ("🛠️ Manage Products", self._open_product_management),
            ("📁 File", lambda: log.info("File clicked")),
            ("⚙️ Settings", lambda: log.info("Settings clicked")),
            ("📊 Reports", lambda: log.info("Reports clicked")),
            ("📦 Inventory", lambda: log.info("Inventory clicked")),
            ("❓ Help", lambda: log.info("Help clicked")),
            ("ℹ️ About", lambda: log.info("About clicked")),
            ("🖨️ Test Printer", self._test_printer)
        ]

        for text, func in items:
            if "File" in text or "Settings" in text:
                menu.addSeparator()
            action = QAction(text, self.ui)
            action.triggered.connect(func)
            menu.addAction(action)

        pos = self.ui.menu_btn.mapToGlobal(QPoint(0, self.ui.menu_btn.height()))
        menu.exec_(pos)

    def _test_printer(self):
        tester = PrinterTester()
        tester.run()
        tester.test_printer()

    def _open_product_management(self):
        ProductManagementDialog(self.parent).exec_()

    def _open_create_product(self):
        dlg = ProductEditorDialog(self.parent)
        if dlg.exec_() == QDialog.Accepted:
            self.parent.main_content.products_sec.refresh()

    def _open_order_products(self):
        dlg = OrderProductsDialog(self.parent)
        if dlg.exec_() == QDialog.Accepted:
            self.parent.main_content.products_sec.refresh()

    def minimize_window(self):
        if self.parent:
            self.parent.showMinimized()

    def toggle_maximize(self):
        if self.parent:
            if self.parent.isMaximized():
                self.parent.showNormal()
                self.ui.maximize_btn.setText("□")
            else:
                self.parent.showMaximized()
                self.ui.maximize_btn.setText("❐")

    def close_application(self):
        if self.parent:
            self.parent.close()

================================================================================

Path: C:\FPOS\kpapython\kpa\ui\title_bar\ui.py
--------------------------------------------------------------------------------
# custom_title_bar_ui.py

from PyQt5.QtWidgets import (
    QWidget, QHBoxLayout, QPushButton, QLabel, QLineEdit
)
from PyQt5.QtGui import QFont
from PyQt5.QtCore import Qt, QPoint, pyqtSignal

from utils.constants import *
from ui.utils.styles import TitleBarStyles, CategoryButtonStyles, BarcodeInputStyles, TitleLabelStyles


class CustomTitleBar(QWidget):
    show_category = pyqtSignal(str)
    barcode_scanned = pyqtSignal(str)
    load_bill = pyqtSignal(int)

    def __init__(self, logic, parent=None):
        super().__init__(parent)
        self.logic = logic
        self.parent = parent
        self.last_bill_buttons = []

        self._drag_pos = QPoint()
        self.pressing = False

        self._build_ui()
        self.logic.connect_signals(self)

    def _build_ui(self):
        self.setFixedHeight(TITLE_BAR_HEIGHT)
        self.setStyleSheet(TitleBarStyles.TITLE_BAR_STYLE)

        layout = QHBoxLayout(self)
        layout.setContentsMargins(TITLE_BAR_MARGIN, 0, TITLE_BAR_MARGIN, 0)
        layout.setSpacing(TITLE_BAR_SPACING)

        layout.addLayout(self._create_left())
        layout.addLayout(self._create_middle())
        layout.addStretch()
        layout.addLayout(self._create_right())

        self.setLayout(layout)

    def _create_left(self):
        layout = QHBoxLayout()
        layout.setSpacing(TITLE_BAR_LEFT_SPACING)

        self.menu_btn = QPushButton("☰")
        self.menu_btn.setFixedSize(MENU_BUTTON_SIZE, MENU_BUTTON_SIZE)
        self.menu_btn.setFont(QFont(TITLE_BAR_FONT_FAMILY, MENU_BUTTON_FONT_SIZE))
        self.menu_btn.setStyleSheet(TitleBarStyles.MENU_BUTTON_STYLE)
        self.menu_btn.clicked.connect(self.logic.show_menu)
        layout.addWidget(self.menu_btn)

        self.title_label = QLabel(APP_TITLE)
        self.title_label.setFont(QFont(TITLE_BAR_FONT_FAMILY, TITLE_BAR_FONT_SIZE, QFont.Bold))
        self.title_label.setStyleSheet(TitleLabelStyles.LABEL_STYLE)
        layout.addWidget(self.title_label)

        return layout

    def _create_middle(self):
        layout = QHBoxLayout()
        layout.setSpacing(TITLE_BAR_SPACING)

        self.fruits_btn = QPushButton("🍏 Fruits & Veg")
        self.fruits_btn.setFixedSize(FRUITS_BUTTON_WIDTH, FRUITS_BUTTON_HEIGHT)
        self.fruits_btn.setStyleSheet(CategoryButtonStyles.FRUITS_BUTTON_STYLE)
        self.fruits_btn.clicked.connect(lambda: self.show_category.emit("fruits_veg"))
        layout.addWidget(self.fruits_btn)

        self.manual_btn = QPushButton("📦 Manual")
        self.manual_btn.setFixedSize(MANUAL_BUTTON_WIDTH, MANUAL_BUTTON_HEIGHT)
        self.manual_btn.setStyleSheet(CategoryButtonStyles.MANUAL_BUTTON_STYLE)
        self.manual_btn.clicked.connect(lambda: self.show_category.emit("manual"))
        layout.addWidget(self.manual_btn)

        self.barcode_input = QLineEdit()
        self.barcode_input.setPlaceholderText(BARCODE_PLACEHOLDER)
        self.barcode_input.setFixedSize(BARCODE_INPUT_WIDTH, BARCODE_INPUT_HEIGHT)
        self.barcode_input.setStyleSheet(BarcodeInputStyles.INPUT_STYLE)
        self.barcode_input.returnPressed.connect(self.logic.on_barcode_entered)
        layout.addWidget(self.barcode_input)

        self.logic.add_last_bill_buttons(layout)

        self.bill_input = QLineEdit()
        self.bill_input.setPlaceholderText("Enter Bill ID")
        self.bill_input.setFixedSize(120, 40)
        self.bill_input.setStyleSheet(BarcodeInputStyles.INPUT_STYLE)
        self.bill_input.returnPressed.connect(self.logic.on_load_bill)
        layout.addWidget(self.bill_input)

        self.load_button = QPushButton("Load")
        self.load_button.setFixedSize(80, 40)
        self.load_button.setStyleSheet(TitleBarStyles.MENU_BUTTON_STYLE)
        self.load_button.clicked.connect(self.logic.on_load_bill)
        layout.addWidget(self.load_button)

        return layout

    def _create_right(self):
        layout = QHBoxLayout()
        layout.setSpacing(5)

        self.minimize_btn = QPushButton("−")
        self.minimize_btn.setFixedSize(WINDOW_CONTROL_BUTTON_SIZE, WINDOW_CONTROL_BUTTON_SIZE)
        self.minimize_btn.setFont(QFont(TITLE_BAR_FONT_FAMILY, WINDOW_CONTROL_FONT_SIZE, QFont.Bold))
        self.minimize_btn.setStyleSheet(TitleBarStyles.MINIMIZE_BUTTON_STYLE)
        self.minimize_btn.clicked.connect(self.logic.minimize_window)
        layout.addWidget(self.minimize_btn)

        self.maximize_btn = QPushButton("□")
        self.maximize_btn.setFixedSize(WINDOW_CONTROL_BUTTON_SIZE, WINDOW_CONTROL_BUTTON_SIZE)
        self.maximize_btn.setFont(QFont(TITLE_BAR_FONT_FAMILY, MAXIMIZE_BUTTON_FONT_SIZE, QFont.Bold))
        self.maximize_btn.setStyleSheet(TitleBarStyles.MAXIMIZE_BUTTON_STYLE)
        self.maximize_btn.clicked.connect(self.logic.toggle_maximize)
        layout.addWidget(self.maximize_btn)

        self.close_btn = QPushButton("×")
        self.close_btn.setFixedSize(WINDOW_CONTROL_BUTTON_SIZE, WINDOW_CONTROL_BUTTON_SIZE)
        self.close_btn.setFont(QFont(TITLE_BAR_FONT_FAMILY, WINDOW_CONTROL_FONT_SIZE, QFont.Bold))
        self.close_btn.setStyleSheet(TitleBarStyles.CLOSE_BUTTON_STYLE)
        self.close_btn.clicked.connect(self.logic.close_application)
        layout.addWidget(self.close_btn)

        return layout

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self._drag_pos = self.mapToGlobal(event.pos())
            self.pressing = True

    def mouseMoveEvent(self, event):
        if self.pressing and self.parent:
            end = self.mapToGlobal(event.pos())
            movement = end - self._drag_pos
            self.parent.setGeometry(
                self.mapToGlobal(movement).x(), self.mapToGlobal(movement).y(),
                self.parent.width(), self.parent.height()
            )
            self._drag_pos = end

    def mouseReleaseEvent(self, event):
        self.pressing = False

================================================================================

Path: C:\FPOS\kpapython\kpa\ui\utils\styles.py
--------------------------------------------------------------------------------
# utils/styles.py (refactored with light futuristic theme)

class ColorPalette:
    BASE_BG = "#f5f9ff"
    PRIMARY = "#0ea5e9"
    PRIMARY_DARK = "#0284c7"
    PRIMARY_LIGHT = "#e0f7ff"
    ACCENT = "#ffffff"
    TEXT = "#1e293b"
    BORDER = "#cbd5e1"
    HOVER = "#e2e8f0"
    PRESSED = "#cbd5e1"


class GlobalStyles:
    GLOBAL_STYLE = f"""
        QWidget {{
            font-family: 'Segoe UI', 'Ubuntu', sans-serif;
            font-size: 13px;
            background-color: {ColorPalette.BASE_BG};
            color: {ColorPalette.TEXT};
        }}
        QPushButton {{
            padding: 8px 14px;
            border-radius: 8px;
            background-color: {ColorPalette.ACCENT};
            border: 1px solid {ColorPalette.BORDER};
            font-weight: 500;
        }}
        QPushButton:hover {{
            background-color: {ColorPalette.HOVER};
        }}
        QPushButton:pressed {{
            background-color: {ColorPalette.PRESSED};
        }}
        QScrollArea {{
            border: none;
        }}
        QScrollBar:vertical, QScrollBar:horizontal {{
            background: transparent;
        }}
        QScrollBar::handle:vertical, QScrollBar::handle:horizontal {{
            background-color: {ColorPalette.BORDER};
            border-radius: 6px;
            min-height: 20px;
            min-width: 20px;
        }}
        QScrollBar::handle:hover {{
            background-color: {ColorPalette.PRIMARY};
        }}
        QLineEdit, QTextEdit {{
            background-color: {ColorPalette.ACCENT};
            border: 1px solid {ColorPalette.BORDER};
            border-radius: 6px;
            padding: 6px;
            color: {ColorPalette.TEXT};
        }}
        QLineEdit:focus {{
            border-color: {ColorPalette.PRIMARY};
            background-color: {ColorPalette.HOVER};
        }}
    """


class BillingStyles:
    FRAME_STYLE = f"background-color: white; border: 2px solid {ColorPalette.BORDER};"
    TITLE_STYLE = f"margin: 10px; padding: 10px; background-color: {ColorPalette.PRIMARY}; color: white;"
    CUSTOMER_FRAME_STYLE = f"""
        background-color: {ColorPalette.ACCENT};
        border: 1px solid {ColorPalette.BORDER};
        padding: 0px;
        margin: 0;
    """
    CUSTOMER_BUTTON_STYLE = GlobalStyles.GLOBAL_STYLE
    CUSTOMER_BUTTON_SELECTED_STYLE = f"""
        QPushButton {{
            background-color: {ColorPalette.PRIMARY};
            color: white;
            border: none;
            border-radius: 8px;
            font-weight: bold;
        }}
        QPushButton:hover {{
            background-color: {ColorPalette.PRIMARY_DARK};
        }}
        QPushButton:pressed {{
            background-color: #0369a1;
        }}
    """
    EDITING_BILL_LABEL_STYLE = f"""
        QLabel {{
            font-size: 14px;
            font-weight: bold;
            color: {ColorPalette.TEXT};
        }}
    """


class BillingListStyles:
    SCROLL_STYLE = f"QScrollArea {{ border: none; background-color: {ColorPalette.ACCENT}; }}"
    CONTAINER_STYLE = f"QWidget {{ background-color: {ColorPalette.ACCENT}; }}"


class BillingListItemStyles:
    SELECTED_STYLE = f"""
        QFrame {{
            border: 2px solid {ColorPalette.PRIMARY};
            border-radius: 4px;
            background-color: {ColorPalette.HOVER};
        }}
    """
    DEFAULT_STYLE = f"""
        QFrame {{
            border: 1px solid {ColorPalette.BORDER};
            border-radius: 4px;
            background-color: {ColorPalette.ACCENT};
        }}
        QFrame:hover {{
            background-color: {ColorPalette.HOVER};
        }}
    """
    COUNT_LABEL_STYLE = f"background-color: {ColorPalette.HOVER}; border-radius: 3px; padding: 2px 4px;"
    HIGHLIGHT_STYLE = f"color: {ColorPalette.TEXT}; background-color: {ColorPalette.PRIMARY_LIGHT}; border: 2px solid {ColorPalette.PRIMARY}; border-radius: 3px;"
    DEFAULT_FIELD_STYLE = f"color: {ColorPalette.TEXT}; background-color: {ColorPalette.ACCENT}; border: 1px solid {ColorPalette.BORDER}; border-radius: 3px;"


class BillingKeypadStyles:
    NUMBER_STYLE = f"background-color: {ColorPalette.HOVER}; color: {ColorPalette.TEXT};"
    PLUS_MINUS_STYLE = f"background-color: {ColorPalette.PRIMARY}; color: white;"
    CLEAR_STYLE = "background-color: #e11d48; color: white;"


class ActionButtonStyles:
    ADD_ROW_STYLE = "background-color: #10b981; color: white;"
    DELETE_ROW_STYLE = "background-color: #ef4444; color: white;"
    PRICE_STYLE = "background-color: #3b82f6; color: white;"
    QTY_STYLE = "background-color: #8b5cf6; color: white;"
    BILL_AMOUNT_STYLE = f"color: {ColorPalette.TEXT}; border: none; padding: 5px; font-weight: bold;"
    BILL_BUTTON_STYLE = GlobalStyles.GLOBAL_STYLE


class CategoryStyles:
    FRAME_STYLE = f"background-color: {ColorPalette.ACCENT}; border: 1px solid {ColorPalette.BORDER};"
    TITLE_STYLE = f"background-color: {ColorPalette.PRIMARY}; color: white; padding: 10px; margin-bottom: 5px;"
    BUTTON_STYLE = GlobalStyles.GLOBAL_STYLE


class ProductStyles:
    FRAME_STYLE = CategoryStyles.FRAME_STYLE
    TITLE_STYLE = CategoryStyles.TITLE_STYLE
    BUTTON_STYLE = GlobalStyles.GLOBAL_STYLE


class TitleBarStyles:
    LAST_BILL_BUTTON_STYLE = GlobalStyles.GLOBAL_STYLE
    TITLE_BAR_STYLE = f"QWidget {{ background-color: {ColorPalette.PRIMARY}; border-bottom: 2px solid {ColorPalette.PRIMARY_DARK}; }}"
    MENU_BUTTON_STYLE = GlobalStyles.GLOBAL_STYLE
    MINIMIZE_BUTTON_STYLE = MENU_BUTTON_STYLE
    MAXIMIZE_BUTTON_STYLE = MENU_BUTTON_STYLE
    CLOSE_BUTTON_STYLE = f"""
        QPushButton {{
            background-color: transparent;
            border: none;
            color: {ColorPalette.TEXT};
            border-radius: 8px;
        }}
        QPushButton:hover {{
            background-color: #e74c3c;
        }}
        QPushButton:pressed {{
            background-color: #c0392b;
        }}
    """
    MENU_STYLE = f"""
        QMenu {{
            background-color: {ColorPalette.ACCENT};
            border: 1px solid {ColorPalette.BORDER};
            border-radius: 8px;
            padding: 5px;
            color: {ColorPalette.TEXT};
            font-size: 14px;
        }}
        QMenu::item {{
            background-color: transparent;
            padding: 8px 20px;
            border-radius: 4px;
            margin: 2px;
        }}
        QMenu::item:selected {{
            background-color: {ColorPalette.PRIMARY};
            color: white;
        }}
        QMenu::separator {{
            height: 1px;
            background-color: {ColorPalette.BORDER};
            margin: 5px 10px;
        }}
    """


class ProductButtonStyles:
    BUTTON_STYLE = GlobalStyles.GLOBAL_STYLE


class MainContentStyles:
    FRAME_STYLE = f"background-color: {ColorPalette.HOVER}; border: 1px solid {ColorPalette.BORDER};"


class CategoryButtonStyles:
    FRUITS_BUTTON_STYLE = """
        QPushButton {
            background-color: #10b981;
            color: white;
            border: none;
            border-radius: 5px;
            font-weight: bold;
        }
        QPushButton:hover {
            background-color: #059669;
        }
        QPushButton:pressed {
            background-color: #047857;
        }
    """
    MANUAL_BUTTON_STYLE = """
        QPushButton {
            background-color: #3b82f6;
            color: white;
            border: none;
            border-radius: 5px;
            font-weight: bold;
        }
        QPushButton:hover {
            background-color: #2563eb;
        }
        QPushButton:pressed {
            background-color: #1d4ed8;
        }
    """


class BarcodeInputStyles:
    INPUT_STYLE = f"""
        QLineEdit {{
            background-color: {ColorPalette.ACCENT};
            border: 1px solid {ColorPalette.BORDER};
            border-radius: 6px;
            padding: 6px 12px;
            font-size: 13px;
            color: {ColorPalette.TEXT};
        }}
        QLineEdit:focus {{
            border-color: {ColorPalette.PRIMARY};
            background-color: {ColorPalette.HOVER};
        }}
    """


class TitleLabelStyles:
    LABEL_STYLE = f"color: {ColorPalette.TEXT}; padding: 5px;"

================================================================================

Path: C:\FPOS\kpapython\kpa\ui\utils\ui_helpers.py
--------------------------------------------------------------------------------
# File: utils/ui_helpers.py
def toggle_visibility(widgets, visible):
    for widget in widgets:
        widget.setVisible(visible)
================================================================================

Path: C:\FPOS\kpapython\kpa\utils\constants.py
--------------------------------------------------------------------------------
# UI Constants
import os

BUTTON_SIZE = 50
ACTION_BUTTON_WIDTH = 80
ACTION_BUTTON_HEIGHT = 40


# Image Directory
IMAGE_DIR = os.path.join(os.getcwd(), "product_images")

# Product Grid Layout
PRODUCTS_PER_ROW = 4
PRODUCT_GRID_SPACING = 12

# Product Button Dimensions
PRODUCT_BUTTON_WIDTH = 120
PRODUCT_BUTTON_HEIGHT = 180
PRODUCT_ICON_SIZE = 100

# Billing Section
BILLING_SECTION_WIDTH = 350

# Font Settings
PRODUCT_BUTTON_FONT_FAMILY = "Arial"
PRODUCT_BUTTON_FONT_SIZE = 11

# Default Category
DEFAULT_CATEGORY = "fruits_veg"
# Title Bar Constants
TITLE_BAR_HEIGHT = 50
TITLE_BAR_MARGIN = 10
TITLE_BAR_SPACING = 10
TITLE_BAR_LEFT_SPACING = 15

# Title Bar Button Dimensions
TITLE_BAR_BUTTON_SIZE = 40
MENU_BUTTON_SIZE = 40
WINDOW_CONTROL_BUTTON_SIZE = 40

# Category Button Dimensions
FRUITS_BUTTON_WIDTH = 120
FRUITS_BUTTON_HEIGHT = 35
MANUAL_BUTTON_WIDTH = 100
MANUAL_BUTTON_HEIGHT = 35

# Barcode Input Dimensions
BARCODE_INPUT_WIDTH = 150
BARCODE_INPUT_HEIGHT = 35

# Font Settings
TITLE_BAR_FONT_FAMILY = "Arial"
TITLE_BAR_FONT_SIZE = 16
MENU_BUTTON_FONT_SIZE = 16
WINDOW_CONTROL_FONT_SIZE = 16
MAXIMIZE_BUTTON_FONT_SIZE = 14

# App Title
APP_TITLE = "FPOS - Fast Point of Sale !!!"

# Placeholder Text
BARCODE_PLACEHOLDER = "Scan barcode here..."

================================================================================

Path: C:\FPOS\kpapython\kpa\utils\logger.py
--------------------------------------------------------------------------------
import logging

def get_logger(name="app"):
    logger = logging.getLogger(name)
    if not logger.handlers:
        logger.setLevel(logging.DEBUG)
        ch = logging.StreamHandler()
        ch.setLevel(logging.DEBUG)
        formatter = logging.Formatter('[%(levelname)s] %(asctime)s — %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
    return logger

================================================================================

Path: C:\FPOS\kpapython\kpa\utils\ui_helpers.py
--------------------------------------------------------------------------------
def toggle_visibility(widgets, visible):
    for widget in widgets:
        widget.setVisible(visible)
================================================================================

Path: C:\FPOS\kpapython\kpa\utils\weight.py
--------------------------------------------------------------------------------
import platform
import serial
import glob

from utils.logger import get_logger
log = get_logger(__name__)

def find_serial_port():
    if platform.system() == 'Linux':
        ports = glob.glob('/dev/ttyUSB*') + glob.glob('/dev/ttyACM*') + glob.glob('/dev/ttyS*')
        for port in ports:
            try:
                return serial.Serial(port, 2400, timeout=10)
            except Exception:
                continue
    elif platform.system() == 'Windows':
        return None
    return None

def weight():
    serialport = find_serial_port()
    if serialport is None:
        log.info("No valid serial port found")
        return None  # Return None if no serial port is found

    try:
        while True:
            try:
                if serialport.read() == b'[':
                    command = serialport.read(size=8)
                    fullstring = '000000'

                    if command != b'/////00@':
                        try:
                            fullstring = command.decode("utf-8")
                        except:
                            continue

                        if "" in fullstring:
                            fullstring = fullstring[0:6]
                        else:
                            fullstring = "000000"

                    try:
                        kilo = float(fullstring) / 1000
                        serialport.flushInput()
                        return kilo  # Return the weight in kilograms
                    except Exception as e:
                        log.info("Conversion error: " + str(e))
                        return None
            except Exception as e:
                log.info("Exception in serial read loop: " + str(e))
                serialport.close()
                return None
    except Exception as e:
        log.info("Exception in weight thread: " + str(e))
        return None

if __name__ == "__main__":
    weight()

================================================================================

Path: C:\FPOS\kpapython\kpa\utils\print_pkg\printer_config.py
--------------------------------------------------------------------------------
import platform
from datetime import datetime

import usb.core
import usb.util
from time import sleep
from escpos import printer
from utils.logger import get_logger
log = get_logger(__name__)

USBTMC_bInterfaceClass = 7
USBTMC_bInterfaceSubClass = 1


class PrinterTester:
    def __init__(self):
        self.p = None
        self.printer_initialized = False
        self.device = None

    def is_printer_initialized(self):
        """Check if the printer is already initialized."""
        return self.printer_initialized and self.p is not None

    def initialize_printer(self, idVendor, idProduct, inputEndPoint, outputEndPoint):
        if self.is_printer_initialized():
            log.info("✅ Printer is already initialized.")
            return

        try:
            self.p = printer.Usb(int(idVendor, 16), int(idProduct, 16),
                                 in_ep=int(inputEndPoint, 16),
                                 out_ep=int(outputEndPoint, 16))
            sleep(0.5)
            self.printer_initialized = True
            log.info("✅ Printer initialized.")
        except Exception as e:
            log.info("❌ Printer initialization failed:", e)

    def print_receipt(self, receipt_content ,total):
        """Print the receipt with a bold header using ESC/POS commands."""
        if not self.is_printer_initialized():
            log.info("❌ Printer is not initialized. Cannot print.")
            return

        try:
            self.p._raw(b'\x1B\x40')  # Reset printer
            # Set default text style
            self.p._raw(b'\x1b\x45\x00')  # Disable bold
            self.p._raw(b'\x1b\x61\x00')  # Align left
            self.p._raw(b'\x1b\x21\x00')  # Font A, no double width, no double height

            # Print the date and time
            self.p.text(datetime.now().strftime("%Y-%m-%d \n%H:%M:%S\n"))

            # Set bold and centered for the header, with Font B
            self.p._raw(b'\x1b\x45\x01')  # Enable bold
            self.p._raw(b'\x1b\x61\x01')  # Align center
            self.p._raw(b'\x1b\x21\x31')  # Font B, double width, double height

            # Print the bold header with Font B
            self.p._raw(b'\x1b\x61\x01')  # Align center
            self.p.image('three.jpg')  # Path to the image

            # Reset to normal text style
            self.p._raw(b'\x1B\x40')  # Reset printer
            self.p._raw(b'\x1b\x45\x00')  # Disable bold
            self.p._raw(b'\x1b\x61\x00')  # Align left
            self.p._raw(b'\x1b\x21\x10')  # Font A, no double width, double height

            # Print the rest of the receipt
            self.p.text(receipt_content + "\n")

            # Print the total amount
            # bold , centered, Font B
            self.p._raw(b'\x1b\x45\x01')  # Enable bold
            self.p._raw(b'\x1b\x61\x01')  # Align center
            self.p._raw(b'\x1b\x21\x31')  # Font B, double width, double height
            self.p.text(f"TOTAL: {total:.2f}\n")

            # Cut the paper
            self.p.cut()
            log.info("✅ Receipt printed successfully with bold header in Font B.")
        except Exception as e:
            log.exception(f"❌ Failed to print receipt: {e}")


    def stringtohex(self, strin):
        try:
            return hex(int(strin.strip(), 16))
        except Exception as e:
            log.exception("ERROR at stringtohex:", e)
            return None

    def list_devices(self):
        def is_usbtmc_device(dev):
            try:
                for cfg in dev:
                    d = usb.util.find_descriptor(cfg,
                                                 bInterfaceClass=USBTMC_bInterfaceClass,
                                                 bInterfaceSubClass=USBTMC_bInterfaceSubClass)
                    return d is not None
            except Exception as e:
                log.exception("ERROR in is_usbtmc_device:", e)
                return False

        try:
            return list(usb.core.find(find_all=True, custom_match=is_usbtmc_device))
        except Exception as e:
            log.exception("ERROR in list_devices:", e)
            return []

    def test_printer(self):
        if not self.printer_initialized:
            log.error("❌ Printer is not initialized.")
            return

        try:
            self.p.text("Hello World\n")
            self.p.cut()
            log.info("✅ Hello World printed successfully.")
        except Exception as e:
            log.error("❌ Failed to print Hello World:", e)
        finally:
            self.cleanup()

    def cleanup(self):
        """Release USB resources and reset the printer."""
        if self.p:
            try:
                self.p.close()
            except Exception as e:
                log.error("⚠️Error closing printer:", e)
        if self.device:
            try:
                usb.util.dispose_resources(self.device)
                log.info("✅ USB resources released.")
            except Exception as e:
                log.error("⚠️Error releasing USB resources:", e)
        self.p = None
        self.device = None
        self.printer_initialized = False

    def run(self):
        if platform.system() == 'Windows':
            log.info("This script is for Linux (USB printer detection won't work on Windows).")
            return

        devices = self.list_devices()
        if not devices:
            log.info("❌ No USB printer devices found.")
            return

        for dev in devices:
            try:
                desc = str(dev)
                vens = "0x" + desc.split("idVendor", 1)[1].split("0x")[1].split(" ")[0]
                prods = "0x" + desc.split("idProduct", 1)[1].split("0x")[1].split(" ")[0]
                invals = "0x" + desc.split("bEndpointAddress", 2)[1].split("0x")[1].split(" ")[0]
                outvals = "0x" + desc.split("bEndpointAddress", 2)[2].split("0x")[1].split(" ")[0]
                idVendor = self.stringtohex(vens)
                idProduct = self.stringtohex(prods)
                inputEndPoint = self.stringtohex(invals)
                outputEndPoint = self.stringtohex(outvals)

                log.info(f"🖨️ Found USB device: Vendor={idVendor}, Product={idProduct}")
                self.device = dev
                self.initialize_printer(idVendor, idProduct, inputEndPoint, outputEndPoint)
                if self.printer_initialized:
                    break
            except Exception as e:
                log.error("⚠️Error parsing device info:", e)

================================================================================

Path: C:\FPOS\kpapython\kpa\utils\styles\styles.py
--------------------------------------------------------------------------------

================================================================================

